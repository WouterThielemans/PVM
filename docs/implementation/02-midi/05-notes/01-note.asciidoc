:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üë®‚Äçüîß
:source-highlighter: rouge
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= `NOTE`

In order to visualize the music, we need to extract the notes.
Right now, the notes are encoded as a series of note-on note-off events.
The instrument is determined by the channel and the program-change event.
We now wish to bundle all note-related information into a single data structure.
It would contain:

* The note number
* The time at which the note starts playing
* The duration of the note
* The velocity (0-127)
* The instrument

[NOTE,caption={task-caption}]
====
Define a `NOTE` structure with the required fields.
For most of the fields, you have defined specialized types in an earlier step; make sure to use them.
Since we will not be reading `NOTE` objects directly from file, we don't need to worry about memory alignment details.
Define a constructor that can be used to initialize all fields at once.

Also define `==` and `!=` operators as well as a `<<` operator which turns a note object into the string
`Note(number=N,start=N,duration=N,instrument=N)`.
====
