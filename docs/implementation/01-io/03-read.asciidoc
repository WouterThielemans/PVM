:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üë®‚Äçüîß
:source-highlighter: rouge
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= `read`

`read_to<T>` is a fine function, but it can be cumbersome to use.
If we want to read a simple `int`, we first need to introduce a variable of this type and then pass a pointer to it to `read_to`:

[source,c++]
----
int value;
read_to(in, &value);
----

It would be much more pleasant to write

[source,c++]
----
int value = read<int>(in);
----

However, we only want to allow this for small ``T``s, more specifically, only the fundamental types (`bool`, `int`, `unsigned`, ...)
In essence, we want something like

[source,c++]
----
template<typename T where T is primitive>
T read(std::istream& in)
{
    // ...
}
----

C++ allows us to express such constraints, albeit using a rather awkward syntax:

[source,c++]
----
template<typename T, typename std::enable_if<std::is_fundamental<T>::value, T>::type* = nullptr>
T read(std::istream& in)
{
    // ...
}
----

[NOTE,caption={task-caption}]
====
Complete the body of this function so that `read<T>(in)` reads a single `T` from `in` and returns it.
====

TIP: Don't forget the function you just defined in the previous step.
     You might want to use it.
