:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üë®‚Äçüîß
:source-highlighter: rouge
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= Debugger Visualizers

== Problem Statement

While debugging you can view your variable's value.
Visual Studio will try its best to show you relevant information, but there are times where being defining our own visualization rules would improve readability.
This is where https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2017#BKMK_Expressions_and_formatting[debugger visualizers] come in.

For example, say we define a new type age (see for example <<./strong-typedefs.md#,strong typedefs>>):

[source,c++]
----
struct age : tagged<int, age>, ordered<age> { using tagged::tagged; };

age a(5);
----

When querying the value of `a` while debugging, Visual Studio shows you `{ ... }`.
Hardly impressive.
There is the possibility to expand the view, which results in

----
a                      { ... }
  tagged<int, age>     { _value = 5 '\x5' }
  ordered<age>         { ... }
----

We'd prefer it if we didn't have to press the expand arrow to find out what ``a``'s value is.

== Debugger Visualizers

To define a debugger visualizer for values of type `age`, start by adding a `.natvis` file to your project:

* Right click on the project
* Add
* New Item
* Under Utility, choose Debugger visualization file

Open this file.
It should contain

[source,xml]
.*__debugger-visualizer.natvis__*
----
<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
</AutoVisualizer>
----

Add the following rule for the type `age`:

[source,diff]
.*__debugger-visualizer.natvis__*
----
<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
+   <Type Name="age">
+     <DisplayString>{{age = {_value,d}}}</DisplayString>
+   </Type>
</AutoVisualizer>
----

The `DisplayString` determines what is shown while debugging.
With the configuration above, viewing an `age` variable will reveal

----
a        { age = 5 '\x5' }
----

which is more helpful that the old `{ ... }`.
